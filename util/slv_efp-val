#!/usr/bin/env python
"""
 --------------------------------------------------------------------
                         SLV SolEFP - XYZ 
 --------------------------------------------------------------------

 Read the list of xyz files with solute and solvent(s) molecules and 
 evaluate the frequency shifts using SolEFP theory for each cluster.
 Saves the results in <shifts.dat> file.

 Usage:
 
    [frg_1] [frg_2] [mode] [target] cutoffs <type> <supl_1> <supl_2> <reord_1> <reord_2> <ea>
 
 Notes: 
 
   1) frg_1/frg_2 - name of solute/solvent molecules or parameter file(s) 
                    (*.frg format)

   2) mode        - number of mode of solute (normal numbers, helico)
                    
   2) xyz_list    - list of xyz files. Format: 
                    1st and 2nd lines: description
                    3rd line  :  # [gas_phase_freq]
                    next lines:  file      freq
 
   3) cutoffs     - example 1: none 
                      ccut, pcut, ecut - infinity (no cutoffs)

                    example 2: 17.2,14,10
                      ccut = 17.2 bohr  (Coulomb)
                      pcut = 14.0 bohr  (Polarization)
                      ecut = 10.0 bohr  (Exchange-Repulsion)
 
                    example 2: 19,15.1
                      ccut = infinity
                      pcut = 19.0 bohr
                      ecut = 14.0 bohr
 
                    example 3: 10.0
                      ccut, pcut = infinity
                      ecut = 10.0 bohr
 
   4) <type>      - type of interaction term: 
 
                      e - Coulomb electrostatics
                      c - correction terms to electrostatics
                      p - polarization
                      x - repulsion
 
                    Just type the string like ecpx, epx, ep etc depen
                    ding what you want. Typing 'all' will switch on a
                    ll of the implemented terms and is equivalent to 
                    'ecpx'.
 
   5) supl_1      - superimposition list for SOLUTE (Optional).
                    Default: superimpose to all atoms.
                    Format in normal numbers (not in Python convention)
                    Examples: 1-6     or 1,2,3,4    or 4,5,10,11,12
 
   6) supl_2      - superimposition list for SOLVENT (Optional).
                    See above (p. 5)

 Warnings:
  
   o The turn of atoms of solute and solvent has to be exactly identic
     al as it is in the *.frg parameter files!
 --------------------------------------------------------------------
                                         Last revision: 10 Oct 2014
"""
from sys import argv, exit, stdout
from libbbg.utilities import Read_xyz_file, MakeMol, ParseDMA, \
                      PUPA, text_to_list
from libbbg.units import UNITS as u
from time import time
from solvshift.solefp import EFP
from solvshift.slvpar import Frag
from numpy import float64 as f64, array, zeros, linalg, \
                  transpose, int64, concatenate as con, \
                  asfortranarray as farray, dot
import copy
stdout.flush()

print __doc__
if len(argv)==1: exit()

t0 = time()

# [1] Gather the arguments and build data structures

# --- read the parameter files
frg_solute    = Frag(argv[1])
frg_solvent   = Frag(argv[2])
mode          =  int(argv[3])
target        =      argv[4]

# --- read the number of solvent molecules
n_solute_atoms  = frg_solute.get_natoms()
n_solvent_atoms = frg_solvent.get_natoms()

# --- read cutoffs
ccut, pcut, ecut = 1000000.00, 1000000.00, 1000000.00
if argv[5].lower() == 'none': pass
else:
   c = text_to_list( argv[5], delimiter=',', dtype=f64 )
   if   len(c)==3: ccut, pcut, ecut = c
   elif len(c)==2: pcut, ecut       = c
   elif len(c)==1: ecut,            = c

# --- provide terms to be evaluated
if len(argv)>6: typ = argv[6]
else:           typ = 'exp'
elect,rep,pol,corr = True, False, False, False
if 'e' in typ: elect= True
if 'x' in typ: rep  = True
if 'p' in typ: pol  = True
if 'c' in typ: corr = True
if typ.lower() == 'all': 
   elect,rep,pol,corr = True, True, True, True

# --- solute suplist
if len(argv)>7: 
   supl = [ array( text_to_list( argv[7], delimiter=',', dtype=int, dt=1 ), int) , ]
   for i in range(len(supl)): supl[i]-=1
else: supl = None

# --- solvent suplist
if len(argv)>8: 
   supl_sol = array( text_to_list( argv[8], delimiter=',', dtype=int, dt=1 ), int)
   supl_sol-=1
else: supl_sol = None

# --- solute reordlist
if len(argv)>9:
   reord = [ array( text_to_list( argv[9], delimiter=',', dtype=int, dt=1 ) , int) , ]
   for i in range(len(reord)): reord[i]-=1
else: reord = None

# solvent reordlist
if len(argv)>10:
   reord_sol = array( text_to_list( argv[10], delimiter=',', dtype=int, dt=1 ), int) - 1
else: reord_sol = None


# --- additional printout
if len(argv)>11: 
   lprint = bool(argv[11])
   ea = True
else:           
   lprint = True
   ea = False

# [5] create report file
out = open('shifts.dat', 'w')
t = '%8s %10s %10s %10s %10s %10s %10s %10s %10s %10s %10s %10s' % ('# Frame'.ljust(8),
                                                                     'Exact'  .rjust(10),  
                                                                     'EL-TOT' .rjust(10),
                                                                     'EL-MEA' .rjust(10),
                                                                     'EL-EA'  .rjust(10),
                                                                     'POL'    .rjust(10),
                                                                     'REP'    .rjust(10),
                                                                     'EL-MEA-C'.rjust(10),
                                                                     'EL-EA-C' .rjust(10),
                                                                     'TOTAL'   .rjust(10),
                                                                     'RMS_C'   .rjust(10),
                                                                     'RMS_S'   .rjust(10))

out.write(t+'\n')
out.flush()

# --- set the EFP environment
efp = EFP(elect=elect,pol=pol,rep=rep,corr=corr,disp=True,ea=ea,freq=True,mode=mode,
          ccut=ccut,pcut=pcut,ecut=ecut,
          cunit=True)

# --- open the target file
t_f = open(target)
l   = t_f.readlines(); t_f.close()
freq_0  = f64(l[2].split()[-1])
target = list()
for i in range(len(l)-3):
    xyz, freq = l[i+3].split()
    xyz = Read_xyz_file(xyz+'.xyz',mol=True,units='Angstrom').get_pos()
    freq = f64(freq)
    target.append( ( xyz, freq ) )

# [2] Calculate the frequency shifts!
I = 1
for xyz, freq in target:

    n_atoms         = len(xyz)
    n_solvent_mol   = (n_atoms - n_solute_atoms)/n_solvent_atoms
    print " Calculation for %3d structure. No of solvent molecules: %3d" % (I,n_solvent_mol) ,
    stdout.flush()
    supl_copy = copy.deepcopy(supl)
    reord_copy = copy.deepcopy(reord)
    if supl_copy is not None:
       for i in range(n_solvent_mol): 
           supl_copy.append(supl_sol)
    if reord_copy is not None:
       for i in range(n_solvent_mol): 
           reord_copy.append(reord_sol)

    # --- build nmol, ind and bsm data
    nmol = [  frg_solute.get_natoms() , ]
    ind  = [  0                       , ]
    for i in range(n_solvent_mol):
        nmol.append( frg_solvent.get_natoms() )
        ind .append( 1                        )
    bsm  = ( frg_solute, frg_solvent )

    # --- evaluate the shifts
    efp.set(xyz,ind,nmol,bsm,supl_copy,reord_copy)
    efp.eval(0)
    
    # --- get the shifts
    shifts = efp.get_shifts()
    shift_exact = freq-freq_0
    rms_c  = efp.get_rms()
    rms_s  = efp.get_rms_sol()
    print " Shift error: %8.2f [cm-1] Max. RMS: %5.4f" % (shifts[-3]-shift_exact,max(rms_s,rms_c))
    # line of output frequencies
    log = "%8d" % I
    log+= " %10.2f"   %  shift_exact
    log+= " %10.2f"   % (shifts[0]+shifts[1])
    log+= 7*" %10.2f" %  tuple(shifts[:7])
    log+= " %10.5f"   %  rms_c
    log+= " %10.5f\n" %  rms_s
    out.write(log)
    out.flush()
    #
    I+=1

# close the output file
out.close()
print "\n The results were written to the file <shifts.dat> ! \n\n"
