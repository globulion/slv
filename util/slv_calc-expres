#!/usr/bin/python
#*-* coding: utf-8 *-*
"""
 ---------------------------------------------------------------------------------------------------------
                                             SLV-MD-EXP-CORR
 ---------------------------------------------------------------------------------------------------------

 Compute exponential correlation function spectrum by invoking second-order cumulant expansion of the line shape function.

 Usage: [opts]

 Opts: 

   -h                             Help
   -i [str]                       Data file (frequency shifts in rad/ps)          Required.
   -n [int]                       Number of delay time points                     Optional. Default: 4000
   -d [float]                     Time sampling [fs/frame]                        Optional. Default:    1.0
   -c [int]                       Column of data in frequency shift file          Optional. Default:   14
   -o [str]                       Output file name                                Optional. Default: expres.dat
                                                                                                              
 ---------------------------------------------------------------------------------------------------------
                                                                               Last Revision:  1 Aug 2017
"""
from sys import argv, exit
from getopt import getopt, GetoptError

# ----------------------------------------------------------------------------------------------------
__title__           = " SLV-MD-SPECTRUM program" 
__authors__         = " Bartosz BÅ‚asiak (email: blasiak.bartosz@gmai.com)"
__version__         = " Version: 1.0.1"
# ----------------------------------------------------------------------------------------------------

def Usage():
    print __doc__
    exit()

def Info():
    print
    print __title__
    print __authors__
    print __version__
    print " Use -h to see help\n"
    exit()

def Main(argv):
    # defaults                                                           Comments:
    dtau_USER                    = 1.0                                 # n*fs; frequency of sampling
    NP_USER                      = 4000                                # number of detay time points to consider
    NCOL_USER                    = 14-1                                # ID (Python convention) of the frequency shift file y-value column
    out_file                     = 'expres.dat'                        # name of output file
    #
    try:
       opts, args = getopt(argv, "hd:n:c:o:i:" , ["help", "dtau=", "n-delay=", "ncol=", "out=", "inp="])
    except GetoptError, error:
        print "\n Invalid option. Please refer to the usage below:" 
        Usage()
    if not opts: Info()
    if ("-h",'') in opts or ("--help", ''  ) in opts: Usage()
    for opt, arg in opts:
        if opt in ("-h", "--help"          ): Usage()
        if opt in ("-d", "--dtau"          ): dtau_USER                        = float(arg)
        if opt in ("-n", "--n-delay"       ): NP_USER                          =   int(arg)
        if opt in ("-c", "--ncol"          ): NCOL_USER                        =   int(arg)-1
        if opt in ("-o", "--out"           ): out_file                         =       arg    
        if opt in ("-i", "--inp"           ): data_file                        =       arg    



    #
    run(data_file, out_file, dtau_USER, NP_USER, NCOL_USER)
    return

def expres(data, dt, ndel=100):
    import time
    import numpy
    # start measuring time
    t0 = time.time()
    # allocate memory 
    ReJ = numpy.zeros(ndel+1, numpy.float64); ReJ[0] = 1.0
    ImJ = numpy.zeros(ndel+1, numpy.float64)
    as_strided = numpy.lib.stride_tricks.as_strided
    # compute S vector
    S  = numpy.zeros(len(data), numpy.float64)
    S[1:]  = (data[1:] + data[0:-1]) * dt/2.0
    # compute Re[J(c)]
    N = len(data)
    for i in xrange(1,ndel+1):
        if not i%100: print " Computing for NDEL=%d" % i
        neval = N - i; fneval = numpy.float64(neval)
        #s = numpy.array(zip(*(S[j+1:] for j in range(i)))).sum(axis=1)
        s = as_strided(S.copy(), (neval + 1,i), (S.strides[0], S.strides[0])).sum(axis=1)

        v1 = numpy.cos(s).sum()/fneval
        v2 =-numpy.sin(s).sum()/fneval

        ReJ[i] = v1
        ImJ[i] = v2

    # end measuring time
    t1 = time.time()
    #
    t = t1-t0
    print " Elapsed Time: %.3f sec. (%.3f min.)" % (t, t/60.)
    return ReJ, ImJ


def run(data_file, out_file, dtau_USER, NP_USER, NCOL_USER):
    """Compute classical exponential correlation function"""
    # import necessary modules
    import numpy
    import libbbg.units

    # conversion factors and unit conventions
    CmRecToHz           = libbbg.units.UNITS.CmRecToHz /1e12 # [rad/ps]
    
    print
    # --------------------------------------------------------------------------------
    dtau_USER/= 1.0e3  # [ps]

    # read the frequency shift file
    data = numpy.mafromtxt(data_file).data
    T    = data[:,0]
    dw   = data[:,NCOL_USER] * CmRecToHz; dw-= dw.mean()
    
    # compute the correlation function
    rr, ri = expres(dw, dt=dtau_USER, ndel=NP_USER)
    t_max  =(NP_USER+1)*dtau_USER
    t      = numpy.arange(0.0, t_max, dtau_USER)

    # save in the output file
    out = open(out_file, 'w')
    out.write('%13s %17s %17s\n' % ('# Time [ps]'.ljust(13),'Re[Jc(t)]'.ljust(17),'Im[Jc(t)]'.ljust(17)))
    for i in range(NP_USER+1):
        out.write('%13.5E %17.6E %17.6E\n' % (t[i], rr[i], ri[i]))
    out.close()
    # --------------------------------------------------------------------------------
    print " EXPRES Done. Saved to %s\n" % out_file
    return

# RUN
if __name__=='__main__': Main(argv[1:])
