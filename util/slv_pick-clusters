#!/usr/bin/python
"""
Pick the solute-solvent clusters from MD trajectory file

Usage:

 [xtc] nframes dframe thr name_1 n_1 a_1 atoms_1 <name_2> <n_2> <a_2> <atoms_2>

Notes: 
 - nframes - number of frames
 - dframe  - frame increment
 - thr     - threshold for cluster size (COG-COG max distance)
            (in Angstroms)
 - name_1/2- name of molecule 
 - n_1/n_2 - number of solute/solvent atoms
 - s_1/s_2 - list of atoms (delimiter: coma ,)
             ex. C,H,O,O,N,H,H,H,H
 - atoms_1/2 - numbers of atoms (normal numbers)
             to be ordered in the order of EFP file atoms
 - Defaults are for water molecule (O,H,H)
"""
from sys import argv, exit
from math import sqrt as msqrt
from string import Template
print __doc__
if len(argv)==1:exit()
from numpy import float32, zeros, array, sum, sqrt, where, lexsort, arange
from MDAnalysis.coordinates.xdrfile.libxdrfile2 import xdrfile_open, xdrfile_close,\
                                                       read_xtc_natoms, read_xtc  ,\
                                                       read_xtc, DIM, exdrOK
from MDAnalysis.coordinates.TRJ import TRJReader, NCDFReader
from units import UNITS as u
import glob, os, utilities

# GAMESS input template
t_1 = """\
 $system mwords=5 memddi=12 parall=.t. $end
 $contrl scftyp=rhf runtyp=optimize icharg=0 mult=1 units=angs
         maxit=100 exetyp=run ispher=-1 coord=fragonly
         icut=20 itol=30 local=pop $end
!$globop rndini=.true. riord=rand mcmin=.true.
!        mctyp=4 nblock=0 $end
 $statpt nstep=200 opttol=0.00001 $end
!$basis  gbasis=newnew extfil=.true. $end
 $efrag
coord=cart iscrelec=1 iscrpol=1 nodisp
FRAGNAME=@SOLUTE
@COORD\
@SCOORD\
 $end
 $@SOLUTE
@PARC\
 $end
 $@SOLVENT
@PARS\
 $end
"""
t_2 = """\
FRAGNAME=@SOLVENT
@COORD"""

# operational arguments
trajectory =     argv[1]
nframes    =   int(argv[2])
dframe     =   int(argv[3])
thr        = float(argv[4]) * u.AngstromToBohr
name_1     =       argv[5]
n_1        =   int(argv[6])
a_1        =       argv[7].split(',')
atoms_1    = array(utilities.text_to_list(argv[8],delimiter=','),int)-1
if len(argv)>9 : name_2     =     argv[9]
else:            name_2     = 'water'
if len(argv)>10: n_2       = int(argv[10])
else:            n_2        = 3 # water as default
if len(argv)>11: a_2        =     argv[11].split(',')
else:            a_2        = ['O','H','H']
if len(argv)>12: atoms_2    = array(utilities.text_to_list(argv[12],delimiter=','),int)-1
else:            atoms_2    = array([1,2,3],int)-1

natoms  = read_xtc_natoms(trajectory)
nsmol   = (natoms-n_1)/n_2
assert (natoms-n_1)%n_2==0, 'Error in atom numbers: Total No: %5d does not contain integer number of moelcules!'
frame = zeros((natoms,DIM),dtype=float32)
box = zeros((DIM,DIM),dtype=float32)
XTC = xdrfile_open(trajectory,'r')

a_1 = array(a_1)[atoms_1]; a_2 = array(a_2)[atoms_2]
sym_c  = [ 'A%02i%s' % (x+1,a_1[x]) for x in range(len(a_1)) ]
sym_s  = [ 'A%02i%s' % (x+1,a_2[x]) for x in range(len(a_2)) ]
file_c = os.environ['SLV_PATH'] + '/frg/%s/%s.efp' % (name_1,name_1)
file_s = os.environ['SLV_PATH'] + '/frg/%s/%s.efp' % (name_2,name_2)

o  = open(file_c); par_c = o.read(); o.close()
o  = open(file_s); par_s = o.read(); o.close()

class Templ(Template): delimiter='@'
t_1 = Templ(t_1); t_2 = Templ(t_2)

def get_cog(r1):
    """calculate center of geometry"""
    cog = sum(r1,axis=0)/float(len(r1))
    return cog

def get_d(r1,r2):
    """calculate distance between r1 and r2 points"""
    d = msqrt(sum((r1-r2)*(r1-r2)))
    return d

def write(i,r_1,a_1,solvent_mols,a_2):
    """write xyz file and GAMESS inp file for i-th cluster"""
    global t_1, t_2
    soltxt = ''
    xyz = open('cluster-%03i.xyz' % i,'w') 
    inp = open('cluster-%03i.inp' % i,'w')
    #
    log = '%3d\n\n' % (len(a_1) + len(solvent_mols)*len(a_2))
    # write solute
    dat = ''
    for i in range(len(r_1)):
        log+=  '%2s'      %       a_1[i]
        log+= ' %14.6f'*3 % tuple(r_1[i])
        log+= '\n'
        #
        dat+=  '%s'       % sym_c[i]
        dat+= ' %14.6f'*3 % tuple(r_1[i])
        dat+=  '\n'
    # write solvents
    for sol in solvent_mols:
        txt = ''
        for i in range(len(a_2)):
            log+=  '%2s'      %       a_2[i]
            log+= ' %14.6f'*3 % tuple(sol[i])
            log+= '\n'
            #
            txt+=  '%s'       % sym_s[i]
            txt+= ' %14.6f'*3 % tuple(sol[i])
            txt+=  '\n'
        soltxt += t_2.substitute(SOLVENT=name_2.upper(),COORD=txt)
    log+= '\n'
    xyz.write(log)
    inp.write(t_1.substitute(SOLUTE=name_1.upper(),SOLVENT=name_2.upper(),
                             COORD=dat,            SCOORD=soltxt,
                             PARC=par_c,           PARS=par_s))
    xyz.close()
    inp.close()
    return


# 1. Pick the clusters
#

print " Picking clusters ..."
I= 0
for i in range(nframes):
    solvent_mols = list()
    #
    status, step, time, prec = read_xtc(XTC,box,frame)
    if not (i+1)%dframe:
       print " * Reading frame %10i"%(i+1),
       frame *= u.NanometerToAngstrom
       r_1 = frame[:n_1][atoms_1]
       com_c = get_cog(r_1)
       #
       for n in range(nsmol):                   
           s_c = frame[n_1+n*n_2:n_1+(n+1)*n_2][atoms_2]
           com_s = get_cog(s_c)
           d = get_d(com_s,com_c)
           if d<=thr: solvent_mols.append(s_c)
       #
       print " no of solvent molecules: %3d" % len(solvent_mols)
       I+=1
       write(I,r_1,a_1,solvent_mols,a_2)

xdrfile_close(XTC) 
print " Congratulations! %4d clusters were picked and saved!\n" % I

# 2. Generate GAMESS EFP optimization input files
#




